# Author: William Lam

$ESXiServer = "esx01.vcf.lab"
$ESXiRootPassowrd = "VMware1!"

$VCFInstallerVMName = "sddcm01"
$VCFInstallerFQDN = "sddcm01.vcf.lab"
$VCFInstallerRootPassword = "VMware1!VMware1!"
$SSHKeys = ""

$VCFFeatureProperties = @{
    "feature.vcf.internal.single.host.domain" = "true"
}

$VCFDomainManagerProperties = @{
    "enable.speed.of.physical.nics.validation" = "false"
}

$VCFInstallerSoftwareDepot = "offline"
$VCFInstallerDepotHttps = $false

#### DO NOT EDIT BEYOND HERE ####

Function My-Logger {
    param(
        [Parameter(Mandatory=$true)][String]$message,
        [Parameter(Mandatory=$false)][String]$color="green"
    )

    $timeStamp = Get-Date -Format "MM-dd-yyyy_hh:mm:ss"

    Write-Host -NoNewline -ForegroundColor White "[$timestamp]"
    Write-Host -ForegroundColor $color " $message"
}

My-Logger "Connecting to ESXi Host $VIServer ..."
$viConnection = Connect-VIServer $ESXiServer -User root -Password $ESXiRootPassowrd -WarningAction SilentlyContinue

My-Logger "Waiting for VCF Installer UI to be ready ..."
while(1) {
    try {
        $requests = Invoke-WebRequest -Uri "https://${VCFInstallerFQDN}/vcf-installer-ui/login" -Method GET -SkipCertificateCheck -TimeoutSec 5
        if($requests.StatusCode -eq 200) {
            My-Logger "`tVCF Installer UI https://${VCFInstallerFQDN}/vcf-installer-ui/login is now ready!"
            break
        }
    }
    catch {
        My-Logger "VCF Installer UI is not ready yet, sleeping for 120 seconds ..."
        sleep 120
    }
}

$vcfVM = Get-VM -Server $viConnection $VCFInstallerVMName

$scriptName = "vcfIntScript.sh"
$script = @"
#!/bin/bash
# Generated by William Lam's VCF 9 Lab in a Box Script


"@

if($SSHKeys -ne "") {
    $script += "echo `"${SSHKeys}`" > /root/.ssh/authorized_keys`n"
    $script += "sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config`n"
    $script += "systemctl restart sshd`n"
}

$vcfDomainConfigFile = "/etc/vmware/vcf/domainmanager/application.properties"
if($VCFDomainManagerProperties -ne $null) {
    $VCFDomainManagerProperties.GetEnumerator() | Foreach-Object {
        $script += "echo $($_.key)=$($_.value) >> ${vcfDomainConfigFile}`n"
    }
}

$vcfFeatureConfigFile = "/home/vcf/feature.properties"
$VCFFeatureProperties.GetEnumerator() | Foreach-Object {
    $script += "echo $($_.key)=$($_.value) >> ${vcfFeatureConfigFile}`n"
}
$script += "chmod 755 ${vcfFeatureConfigFile}`n"

if($VCFInstallerSoftwareDepot -eq "offline") {
    $vcfLcmConfigFile = "/opt/vmware/vcf/lcm/lcm-app/conf/application-prod.properties"

    if($VCFInstallerDepotHttps -eq $false) {
        $script += "sed -i -e `"/lcm.depot.adapter.port=.*/a lcm.depot.adapter.httpsEnabled=false`" ${vcfLcmConfigFile}`n"
    }
}

$script += "echo 'y' | /opt/vmware/vcf/operationsmanager/scripts/cli/sddcmanager_restart_services.sh"

$script | Out-File $scriptName


My-Logger "Transferring configuration shell script ($scriptName) to VCF Installer VM ..."
Copy-VMGuestFile -Server $viConnection -VM $vcfVM -GuestUser "root" -GuestPassword $VCFInstallerRootPassword -LocalToGuest -Source ${scriptName} -Destination /tmp/${scriptName} -Force | Out-Null

My-Logger "Running configuration shell script on VCF Installer VM ..."
Invoke-VMScript -ScriptText "bash /tmp/${scriptName}" -VM $vcfVM -GuestUser "root" -GuestPassword $VCFInstallerRootPassword  | Out-Null

My-Logger "Disconnecting from ESXi Host $VIServer ..."
Disconnect-VIServer $viConnection -Confirm:$false